// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean        @default(false)
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    Event         Event[]
    Blog          Blog[]
    eventComments EventComment[]
    blogComments  BlogComment[]
}

model Item {
    id          String   @id @default(cuid())
    title       String
    location    String
    description String
    images      String[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Event {
    id          String         @id @default(cuid())
    title       String
    address     String
    description String
    date        DateTime
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    comments    EventComment[]
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model Blog {
    id        String        @id @default(cuid())
    title     String
    content   String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comments  BlogComment[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

model EventComment {
    id        String   @id @default(cuid())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BlogComment {
    id        String   @id @default(cuid())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
